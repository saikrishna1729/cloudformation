AWSTemplateFormatVersion: 2010-09-09
Description: Build a Lab with VPC & subnets with EC2

Parameters:
  Key:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: sainew

  pVPC:
    Type: String
    Default: "myVPC"

Resources: 
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.20.0.0/23
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref pVPC

  PrivateSN:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref myVPC
      CidrBlock: 10.20.0.0/24
      Tags:
        - Key: Name
          Value: Private-Sn

  PublicSN:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref myVPC
      CidrBlock: 10.20.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-sn 


# Internet Gateway
  myInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway


 #Public Route table

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC

  Inetroute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref myInternetGateway
      RouteTableId: !Ref PublicRT

  mySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSN
      RouteTableId: !Ref PublicRT

#Security Group for instance

  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MySg
      GroupDescription: 'Allow HTTP' 
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: '-1'


# EC2 Instance

  myEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref Key
      DisableApiTermination: false
      ImageId: ami-0af2f764c580cc1f9
      InstanceType: 't3.micro'
      SubnetId: !Ref PublicSN
      Monitoring: false
      SecurityGroupIds:
        - !Ref InstanceSG
      UserData: !Base64 |
        #!/bin/bash -ex
        yum install httpd -y
        /sbin/chkconfig --levels 235 httpd on
        service httpd start
        instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)
        region=$(curl http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $4}')
        echo "<h1>Hello $instanceId</h1>" > /var/www/html/index.html
      Tags:
        - Key: key
          Value: value

  myEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref Key
      DisableApiTermination: false
      ImageId: ami-0af2f764c580cc1f9
      InstanceType: 't3.micro'
      SubnetId: !Ref PublicSN
      Monitoring: false
      SecurityGroupIds:
        - !Ref InstanceSG
      UserData: !Base64 |
        #!/bin/bash -ex
        yum install httpd -y
        /sbin/chkconfig --levels 235 httpd on
        service httpd start
        instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)
        region=$(curl http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $4}')
        echo "<h1>Hello $instanceId</h1>" > /var/www/html/index.html
      Tags:
        - Key: key
          Value: value

  myNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: intlb
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSN
      Type: network

  myTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 5
      HealthCheckPort: '80'
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Name: Web
      Port: 80
      Protocol: TCP
      Targets: 
        - Id: !Ref myEC2Instance1
          Port: 80
        - Id: !Ref myEC2Instance2
          Port: 80

      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref myVPC

  myListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref myTargetGroup
          Type: forward
      LoadBalancerArn: !Ref myNLB
      Port: 80
      Protocol: "TCP"


  myEndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties: 
      AcceptanceRequired: false
      ContributorInsightsEnabled: false
      NetworkLoadBalancerArns: 
        - !Ref myNLB





